<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title>「Johny'」PlayGround</title>
<link>https://cdryzun.github.io/</link>
<description>Recent content on 「Johny'」PlayGround</description>
<generator>Hugo -- gohugo.io</generator>
<language>en-us</language>
<lastBuildDate>Thu, 05 Oct 2023 20:40:24 +0800</lastBuildDate><atom:link href="https://cdryzun.github.io/index.xml" rel="self" type="application/rss+xml"/>
<item>
<title>Python Fro DevOps 笔记</title>
<link>https://cdryzun.github.io/post/python-fro-devops-notes/</link>
<pubDate>Thu, 05 Oct 2023 20:40:24 +0800</pubDate>
<guid>https://cdryzun.github.io/post/python-fro-devops-notes/</guid>
<description>笔记 2019 年，70%的开发者认为自己高于平均水平，而 10%的人认为自己低于平均水平。 相信自动化优于等级制度的信念正是 DevOps 的核心。 Windows 操作系统会临时关</description>
</item>
<item>
<title>Slimtoolkit/Slim 与 Gitlab 集成体验</title>
<link>https://cdryzun.github.io/post/slimtoolkit-slim-study-1/</link>
<pubDate>Thu, 05 Oct 2023 16:53:53 +0800</pubDate>
<guid>https://cdryzun.github.io/post/slimtoolkit-slim-study-1/</guid>
<description>说明 SlimToolkit/Slim 是一个开源工具，用于优化 Docker 容器的大小、速度和安全性。它可以将容器的大小缩减多达 30 倍，并提高容器的启动速度和安全性。 SlimToolkit/Slim 使用了一种称为 ptrace 的</description>
</item>
<item>
<title>PVE AutoSnap 工具使用</title>
<link>https://cdryzun.github.io/post/pve-autosnap/</link>
<pubDate>Thu, 05 Oct 2023 16:40:38 +0800</pubDate>
<guid>https://cdryzun.github.io/post/pve-autosnap/</guid>
<description>项目介绍 Github 地址: https://github.com/Corsinvest/cv4pve-autosnap 安装和使用 1 2 3 4 5 6 7 wget https://github.com/Corsinvest/cv4pve-autosnap/releases/download/v1.14.8/cv4pve-autosnap-linux-x64.zip unzip cv4pve-autosnap-linux-x64.zip mv cv4pve-autosnap /usr/bin/ chmod a+x /usr/local/bin/cv4pve-autosnap 使用 备份快照 1 2 3 4 5 6 7 8 9 10 11 SNAP_LIST=&amp;#34;111,101&amp;#34; PVE_USER=&amp;#39;root@pam&amp;#39; PVE_PASSWD=&amp;#39;xxx&amp;#39; PVE_HOST=&amp;#39;192.168.8.19&amp;#39; for vmid in ${SNAP_LIST//,/ };do cv4pve-autosnap --host=${PVE_HOST} \ --username=${PVE_USER} \ --password=${PVE_PASSWD} --vmid=${vmid} \ snap --label=daily --keep=3 done 查</description>
</item>
<item>
<title>Istio in Action 学习笔记</title>
<link>https://cdryzun.github.io/post/istio-in-action-study/</link>
<pubDate>Thu, 05 Oct 2023 16:13:32 +0800</pubDate>
<guid>https://cdryzun.github.io/post/istio-in-action-study/</guid>
<description>Istio 解决的问题 技术介绍 安装使用 使用 istioctl 部署 Istio 控制平面 istiod 部署应用 istioctl 使用记录 更新 Envoy proxy 笔记 Envoy 的核心功能 Envoy 功能体验 Envoy 的管理 API Envoy Ingress VirtualService 网关 TLS HTTP 重定向到 HTTPS 具有</description>
</item>
<item>
<title>站点开始使用 Grafana loki 统计分析</title>
<link>https://cdryzun.github.io/post/blog-starts-loki-data-analysis/</link>
<pubDate>Sat, 29 Jul 2023 16:54:09 +0800</pubDate>
<guid>https://cdryzun.github.io/post/blog-starts-loki-data-analysis/</guid>
<description>说明 建站已接近快三年，一直没有怎么维护和管理，查看站点访问数据目前还使用的是Google Search Console&amp;amp; 正在对接用的CDN厂商 (又拍云) 所提供的后台统计</description>
</item>
<item>
<title>Gitea Actions ActRunner 基于 Systemd 部署安装</title>
<link>https://cdryzun.github.io/post/gitea-actrunner-systemd-deployment/</link>
<pubDate>Tue, 25 Jul 2023 22:06:35 +0800</pubDate>
<guid>https://cdryzun.github.io/post/gitea-actrunner-systemd-deployment/</guid>
<description>说明 Gitea是一个开源的自助式Git服务，用于托管和管理Git仓库。它是一个轻量级且易于安装和使用的解决方案，类似于GitHub或GitL</description>
</item>
<item>
<title>Sonatype Nexus Repository（Nexus3） 私服文件下载至本地 - (使用进阶篇 一)</title>
<link>https://cdryzun.github.io/post/nexus-browse-directory-download/</link>
<pubDate>Tue, 25 Jul 2023 20:47:22 +0800</pubDate>
<guid>https://cdryzun.github.io/post/nexus-browse-directory-download/</guid>
<description>说明 Sonatype Nexus Repository 是什么？ Sonatype Nexus Repository 是一个用于管理和分发软件组件的开源仓库管理系统。它提供了一个集中化的平台，使开发人员能够有效地存储、共享和发布各种类</description>
</item>
<item>
<title>K8S 使用 CronJob 备份 MySQL 数据至 MInIO</title>
<link>https://cdryzun.github.io/post/k8s-cronjob-backup-mysql/</link>
<pubDate>Mon, 24 Jul 2023 16:14:42 +0800</pubDate>
<guid>https://cdryzun.github.io/post/k8s-cronjob-backup-mysql/</guid>
<description>说明 目前 K8S 已相当成熟，完全具备生产环境的落地应用。在各应用复杂的运行场景下，有时也会将 MySQL 这类有状态应用也部署至 K8S 中，但是部署后，如何保证其数</description>
</item>
<item>
<title>Linux 使用 LVM 来扩充分区</title>
<link>https://cdryzun.github.io/post/use-lvm-to-expand-partitions/</link>
<pubDate>Mon, 24 Jul 2023 14:56:12 +0800</pubDate>
<guid>https://cdryzun.github.io/post/use-lvm-to-expand-partitions/</guid>
<description>说明 自用笔记文档 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 cfdisk /dev/vdb # 将磁盘创建分区 为8e类型（ LVM 类型）,如果虚拟机找不到所添加的磁盘，请尝试重启解决。 # 下</description>
</item>
<item>
<title>Argocd Cli Usage Tips</title>
<link>https://cdryzun.github.io/post/argocd-cli-usage-tips/</link>
<pubDate>Mon, 24 Jul 2023 14:19:17 +0800</pubDate>
<guid>https://cdryzun.github.io/post/argocd-cli-usage-tips/</guid>
<description>说明 此篇文档，用于记录在使用 ArgoCD CLi 的过程中，所使用到的一些常用命令，且供参考。 使用记录 ArgoCD cli 安装文档，使用前，配置登录 1 argocd login xxx.argocd.xx 一键 关闭 ArgoCD 下某个 Project</description>
</item>
<item>
<title>修复 SSH 免密无法连接</title>
<link>https://cdryzun.github.io/post/fix-ssh-connect/</link>
<pubDate>Mon, 24 Jul 2023 14:01:29 +0800</pubDate>
<guid>https://cdryzun.github.io/post/fix-ssh-connect/</guid>
<description>说明 我们通常在远程连接目标服务器时，已避免经常性的输入密码，通常会通过 免密钥 的方式以解决每次连接多需要输入密码问题，但有的时候我们配置免密钥</description>
</item>
<item>
<title>Git Docs</title>
<link>https://cdryzun.github.io/post/git-docs/</link>
<pubDate>Fri, 23 Jun 2023 17:07:38 +0800</pubDate>
<guid>https://cdryzun.github.io/post/git-docs/</guid>
<description>常用进阶命令 指定特定仓库拉取代码 1 2 3 4 5 6 7 8 9 git remote add origin $giturl git pull $giturl master git branch --set-upstream-to=origin/master git status git pull 更改远程仓库地址 1 2 3 4 5 6 7 8 9 git remote -v git remote set-url origin $git_url git pull origin master</description>
</item>
<item>
<title>NaiveProxy</title>
<link>https://cdryzun.github.io/post/naiveproxy/</link>
<pubDate>Sun, 11 Dec 2022 15:47:03 +0800</pubDate>
<guid>https://cdryzun.github.io/post/naiveproxy/</guid>
<description>说明 懂的自然懂，直接上文档。 Caddy 编译安装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 wget https://go.dev/dl/go1.19.linux-arm64.tar.gz tar -zxvf go1.19.linux-arm64.tar.gz -C /usr/local/ cat &amp;gt;&amp;gt; /etc/profile &amp;lt;&amp;lt; EOF GO_HOME=/usr/local/go export PATH=\$PATH:\$GO_HOME/bin/:/root/go/bin EOF source /etc/profile go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest xcaddy build --with github.com/caddyserver/forwardproxy@caddy2=github.com/klzgrad/forwardproxy@naive mv caddy /usr/local/bin/caddy mkdir /etc/caddy</description>
</item>
<item>
<title>Shell 实践手册</title>
<link>https://cdryzun.github.io/post/shell-docs/</link>
<pubDate>Fri, 02 Dec 2022 15:12:34 +0800</pubDate>
<guid>https://cdryzun.github.io/post/shell-docs/</guid>
<description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70</description>
</item>
<item>
<title>Go 语言参考手册</title>
<link>https://cdryzun.github.io/post/golang-docs/</link>
<pubDate>Fri, 02 Dec 2022 14:58:28 +0800</pubDate>
<guid>https://cdryzun.github.io/post/golang-docs/</guid>
<description>介绍 这是一个 Go 语言的参考手册，你也可以访问golang.org获取更多信息和其他文档。 Go 是在设计时考虑了系统编程的通用型编程语言。它是强类型</description>
</item>
<item>
<title>Rke 集群集成 Kube-Vip 实现 Loadbalance Service 资源的使用</title>
<link>https://cdryzun.github.io/post/rke-kubevip-loadbalance/</link>
<pubDate>Tue, 12 Oct 2021 13:44:45 +0800</pubDate>
<guid>https://cdryzun.github.io/post/rke-kubevip-loadbalance/</guid>
<description>背景 Kube-Vip 最初是为 Kubernetes 控制平面提供 HA 解决方案而创建的，随着时间的推移，它已经发展为将相同的功能合并到 Kubernetes 的 LoadBalancer 类型的 Service 中。Kube-Vip 特点 如下： VIP</description>
</item>
<item>
<title>以二进制形式部署 CoreDNS 服务器</title>
<link>https://cdryzun.github.io/post/coredns-deployment/</link>
<pubDate>Sat, 25 Sep 2021 16:40:31 +0800</pubDate>
<guid>https://cdryzun.github.io/post/coredns-deployment/</guid>
<description>背景 CoreDNS 是 Golang 编写的一个插件式 DNS 服务器，Kubernetes 1.13 后内置的默认 DNS 服务器。特点如下: 插件化：基于 Caddy 框架，实现了一个插件链的架构，将不同</description>
</item>
<item>
<title>GoLang Struct</title>
<link>https://cdryzun.github.io/post/go-lang-struct/</link>
<pubDate>Sun, 15 Aug 2021 20:00:50 +0800</pubDate>
<guid>https://cdryzun.github.io/post/go-lang-struct/</guid>
<description>Struct 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69</description>
</item>
<item>
<title>使用 Docker Compose 5分钟 部署 一台邮件服务器</title>
<link>https://cdryzun.github.io/post/docker-deploy-mailserver/</link>
<pubDate>Tue, 03 Aug 2021 11:37:38 +0800</pubDate>
<guid>https://cdryzun.github.io/post/docker-deploy-mailserver/</guid>
<description>背景 由于 Gmail 邮箱在国内无法使用 且 国内手机 号码无法继续注册账号原因，最近想着折腾一下 自建一台 邮件服务器 玩玩。正好在国外有台 vps (搬瓦工的)，比较空</description>
</item>
<item>
<title>K3s 集群修改 Flannel CNI 插件网络模式</title>
<link>https://cdryzun.github.io/post/k3s-change-flannel-cni-model/</link>
<pubDate>Thu, 29 Jul 2021 08:56:04 +0800</pubDate>
<guid>https://cdryzun.github.io/post/k3s-change-flannel-cni-model/</guid>
<description>背景说明 在 之前搭建 的 k3s 集群中因为某些原因我将 openwrt 节点，进行了系统重装，更改固件为了 esir 高大全的 op 固件，由于其 固件中没有将 vxlan 模块编译进内核当中，而</description>
</item>
<item>
<title>记录一次 Nexus3 Pypi 私服 Blob Storage 异常的修复</title>
<link>https://cdryzun.github.io/post/nexus3-pypi-blob-storage-fix/</link>
<pubDate>Thu, 22 Jul 2021 15:38:00 +0800</pubDate>
<guid>https://cdryzun.github.io/post/nexus3-pypi-blob-storage-fix/</guid>
<description>说明 在 devops 集成环境中的 测试环境 中，今天发现有几条 pipeline 一直是在构建超时状态。初步查看了一下，以为是哪个 依赖版本的兼容性有些问题, 导致 pip 一直是找不到</description>
</item>
<item>
<title>记录一次 JupyterLab 插件打包问题的修复</title>
<link>https://cdryzun.github.io/post/pipeline-jupyter-labextension-build-fix/</link>
<pubDate>Tue, 20 Jul 2021 17:04:26 +0800</pubDate>
<guid>https://cdryzun.github.io/post/pipeline-jupyter-labextension-build-fix/</guid>
<description>背景 在所关联项目 的 jenkins pipeline ci 流水线中，开发告诉我 生成的 pip 包中未有生成相关的 labextension 依赖文件夹，导致 pip 包虽然是安装成功了，但仍是一个不可用的状态。开发人</description>
</item>
<item>
<title>使用 Cronjob 定时清理 ElasticSearch 中的日志索引</title>
<link>https://cdryzun.github.io/post/cronjob-clean-es-index/</link>
<pubDate>Tue, 13 Jul 2021 11:45:00 +0800</pubDate>
<guid>https://cdryzun.github.io/post/cronjob-clean-es-index/</guid>
<description>背景 在日常使用 efk 日志系统的过程中，每天造成的日志索引量是巨大的，需要进行对相关的索引进行定期清理，来缓解后端储存的占用。如何实现在 kubernetes 中进行优</description>
</item>
<item>
<title>Macos 一键 使用 wkhtmltopdf 将 html 转换为 pdf</title>
<link>https://cdryzun.github.io/post/macos-html-to-pdf/</link>
<pubDate>Mon, 12 Jul 2021 20:21:48 +0800</pubDate>
<guid>https://cdryzun.github.io/post/macos-html-to-pdf/</guid>
<description>安装 wkhtmltopdf 使用 brew 进行安装 1 brew install --cask wkhtmltopdf 将目录下的所有 html 文件一键转换为 pdf 格式 1 for f in *.html; do wkhtmltopdf --load-error-handling ignore -n --enable-local-file-access $f &amp;#34;$f.pdf&amp;#34;; done 参考文档 https://segmentfault.com/a/1190000018988358 https://github.com/wkhtmltopdf/wkhtmltopdf</description>
</item>
<item>
<title>初探 K8s VPA 垂直更改 Pod 资源请求</title>
<link>https://cdryzun.github.io/post/k8s-vpa/</link>
<pubDate>Thu, 08 Jul 2021 14:41:34 +0800</pubDate>
<guid>https://cdryzun.github.io/post/k8s-vpa/</guid>
<description>背景 Vertical Pod Autoscaler（VPA）使用户无需设置 pod 最新的资源限制。 配置后它将根据资源实际使用情况自动设置 request ，从而允许在节点上进行适当的调</description>
</item>
<item>
<title>2021 下半年知识点整理</title>
<link>https://cdryzun.github.io/post/2021-knowledge/</link>
<pubDate>Tue, 29 Jun 2021 11:38:41 +0800</pubDate>
<guid>https://cdryzun.github.io/post/2021-knowledge/</guid>
<description>[toc] 文章的部分内容被密码保护： --- DON'T MODIFY THIS LINE --- 概述 此篇文档 为 2021 年整理的 运维 和 DevOps 相关知识点 K8s 相关 api-Server 为什么 k8s 要用申明式？ 答：只需描述期望状态就行, 剩下</description>
</item>
<item>
<title>使用 Kube-Vip 部署 高可用的 Kubernetes 集群</title>
<link>https://cdryzun.github.io/post/kube-vip-deploy-ha-k8s-cluster/</link>
<pubDate>Thu, 24 Jun 2021 11:01:10 +0800</pubDate>
<guid>https://cdryzun.github.io/post/kube-vip-deploy-ha-k8s-cluster/</guid>
<description>前言 在以前我们在私有环境下创建 Kubernetes 集群时，我们需要准备一个硬件/软件的 负载均衡器 来创建多控制平面集群，更多的情况下我们会选择使用 HAProxy + Keepalived 来实现这</description>
</item>
<item>
<title>Kaniko Docker 镜像构建 初体验</title>
<link>https://cdryzun.github.io/post/kaniko-image-build/</link>
<pubDate>Tue, 15 Jun 2021 10:02:48 +0800</pubDate>
<guid>https://cdryzun.github.io/post/kaniko-image-build/</guid>
<description>使用 docker 命令直接进行构建 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 echo -n yangzun:123456 | base64 eWFuZ3p1bjoxMjM0NTY= cat &amp;gt;&amp;gt; config.json &amp;lt;&amp;lt; EOF { &amp;#34;auths&amp;#34;: { &amp;#34;https://idocker.io/v2/&amp;#34;: { &amp;#34;auth&amp;#34;: &amp;#34;eWFuZ3p1bjoxMjM0NTY=&amp;#34; } } } EOF [root@node1 kaniko]# ls -lh 总用量 4.0K -rw-r--r-- 1 root root</description>
</item>
<item>
<title>Docker-Compose 部署 Nexus3 Docker 私服，配置使用 Traefik 进行代理管理</title>
<link>https://cdryzun.github.io/post/nexus-use-traefik-proxy/</link>
<pubDate>Thu, 10 Jun 2021 09:51:36 +0800</pubDate>
<guid>https://cdryzun.github.io/post/nexus-use-traefik-proxy/</guid>
<description>环境说明 软件版本说明 操作系统: CentOS 7.9.2009 Docker version: 20.10.7 Docker-compsoe version: 1.18.0 Mkcert version: v1.4.3 端口使用规划 nexus 私服端口 使用规划 私服名称 私服作用 私服类型 私服端口 docker-custom 存放，自定义 push的 镜</description>
</item>
<item>
<title>Rancher 导入集群提示 Scheduler &amp; Controller 不健康问题修复</title>
<link>https://cdryzun.github.io/post/rancher-import-cluster-fix/</link>
<pubDate>Tue, 08 Jun 2021 08:45:22 +0800</pubDate>
<guid>https://cdryzun.github.io/post/rancher-import-cluster-fix/</guid>
<description>环境说明 Kubernetes Version: v1.20.4 (kubekey 部署) 操作系统: CentOS 7.9.2009 Rancher Version: v2.4.15 准备 k8s 模拟环境 此次将使用 kubekey 进行一键部署，kubekey 底层 集群部署 基于 kubeadm， 感兴趣的话，</description>
</item>
<item>
<title>在 Kubernetes 中使用 localPv 部署 Gitlab</title>
<link>https://cdryzun.github.io/post/kubernetes-deploy-gitlab/</link>
<pubDate>Tue, 01 Jun 2021 10:13:29 +0800</pubDate>
<guid>https://cdryzun.github.io/post/kubernetes-deploy-gitlab/</guid>
<description>环境说明 Kubernetes Version: v1.20.4 Postgres Version: 12.7 Redis Version: 5.0.9 因在官方提供的 gitlab-ce 镜像中，内置了 Postgres &amp;amp; Redis 的安装，在实际生产使用过程中，想让其连接使用外部统一的服务进行使用，来合理统一</description>
</item>
<item>
<title>快速删除 Rancher 中 失败的 pod资源 </title>
<link>https://cdryzun.github.io/post/quick-delete-rancher-failed-pod/</link>
<pubDate>Thu, 27 May 2021 08:59:56 +0800</pubDate>
<guid>https://cdryzun.github.io/post/quick-delete-rancher-failed-pod/</guid>
<description>在 Rancher 管理的集群中，有的时候会出现对应 副本集 出现 pod 部署失败的情况，比如像下面的图片所示，在多的时候可达上千，又不想手动的去一一点击删除，这里介</description>
</item>
<item>
<title>Gocron 实践安装，实现统一定时任务管理平台</title>
<link>https://cdryzun.github.io/post/gocron-install/</link>
<pubDate>Wed, 26 May 2021 11:29:34 +0800</pubDate>
<guid>https://cdryzun.github.io/post/gocron-install/</guid>
<description>部署环境说明 操作系统: CentOS release 7.8.2003 Gocron Version: v1.5.3 Mysql Version: 5.5 Gocron 说明 gocron 是使用 go 语言开发的轻量级定时任务集中调度和管理系统, 可以用于替代 linux-crontab。</description>
</item>
<item>
<title>使用 Helm 配合 localPV 在 K8s 中部署 Mariadb 主程复制集群</title>
<link>https://cdryzun.github.io/post/helm-k8s-deploy-mariadb/</link>
<pubDate>Tue, 25 May 2021 11:33:17 +0800</pubDate>
<guid>https://cdryzun.github.io/post/helm-k8s-deploy-mariadb/</guid>
<description>环境说明 helm version: v3.3.1 kubernetes: v1.17.9 使用 helm chart: bitnami/mariadb 操作系统: CentOS 7.8.2003 helm 部署 mariadb 前的准备 添加 helm 私服 1 2 3 4 5 6 helm repo add bitnami https://charts.bitnami.com/bitnami helm repo update # 更新仓库索引 helm search repo mariadb bitnami/mariadb 9.3.12 10.5.10 Fast, reliable, scalable, and easy to use open-...</description>
</item>
<item>
<title>使用 Helm 部署 Spinnaker 持续部署(CD)平台</title>
<link>https://cdryzun.github.io/post/spinnaker-helm-installd/</link>
<pubDate>Mon, 24 May 2021 16:33:49 +0800</pubDate>
<guid>https://cdryzun.github.io/post/spinnaker-helm-installd/</guid>
<description>环境说明 Kubernetes Version: v1.17.9 操作系统: CentOS 7.8.2003 Helm Version: v3.2.1 Spinnaker Version: 1.26.3 spinnaker 版本说明 spinnaker 组件说明 Deck：前端web页面 端口9000 Gate：API网关，所有程序通过gate与</description>
</item>
<item>
<title>使用 helm 在 Kubernetes 中部署 Nexus 私服</title>
<link>https://cdryzun.github.io/post/helm-k8s-deploy-nexus/</link>
<pubDate>Sun, 23 May 2021 15:50:31 +0800</pubDate>
<guid>https://cdryzun.github.io/post/helm-k8s-deploy-nexus/</guid>
<description>环境说明 helm version: v3.3.1 kubernetes: v1.17.9 nexus: 3.29.0 部署 准备 storageClass 非 必要 操作，可以选择手动创建 pvc &amp;amp; pv，如果想部署 nfsStorageClass 的话，请参考早期整理的 文档。此篇文档实战部署步骤中基于 nfsStorageClass 进</description>
</item>
<item>
<title>Rancher 开启监控后的，阈值告警配置说明 (三)</title>
<link>https://cdryzun.github.io/post/rancher-monitor-config-third/</link>
<pubDate>Wed, 19 May 2021 08:41:26 +0800</pubDate>
<guid>https://cdryzun.github.io/post/rancher-monitor-config-third/</guid>
<description>环境说明 此文档为 rancher monitor 使用系列的 第三篇 ，主要介绍与 dingtalk 关联配置告警通知、prometheus 告警阈值的配置使用 配置安装 dingtalk webhook webhook github 地址 安装 kustomize 1 2 3 4</description>
</item>
<item>
<title>Rancher 开启监控后，exporter/metrics 的添加说明 (二)</title>
<link>https://cdryzun.github.io/post/rancher-monitor-config-second/</link>
<pubDate>Mon, 17 May 2021 10:41:26 +0800</pubDate>
<guid>https://cdryzun.github.io/post/rancher-monitor-config-second/</guid>
<description>环境说明 上期 介绍了 rancher prometheus operator 的安装和基础 targets 的修复工作。有的时候我们抓取的 exporter metrics 并不在同集群且与集群没有任何关联时，应该怎么和 rancher monitor 进行关联配置呢？下</description>
</item>
<item>
<title>Rancher 开启监控，及生产应用的优化配置工作说明 (一)</title>
<link>https://cdryzun.github.io/post/rancher-monitor-config-first/</link>
<pubDate>Mon, 17 May 2021 10:41:26 +0800</pubDate>
<guid>https://cdryzun.github.io/post/rancher-monitor-config-first/</guid>
<description>环境说明 kubernetes version: v1.17.9 rancher dashboard: v2.3.5 操作系统: centos 7.8.2003 基础环境配置 使用 kubekey 部署 kubernetes 集群 由于篇幅原因，此处省略部署说明，请参考较早期的 文档说明 rancher 单机部署 安装 docker-compose 1 yum install -y</description>
</item>
<item>
<title>Velero 备份迁移工具的安装</title>
<link>https://cdryzun.github.io/post/velero-install/</link>
<pubDate>Sun, 16 May 2021 18:00:36 +0800</pubDate>
<guid>https://cdryzun.github.io/post/velero-install/</guid>
<description>组件安装 基础依赖安装 安装 docker-compose 1 yum install -y docker-compose minio 对象存储的安装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 mkdir -p /data/docker-compose/minio &amp;amp;&amp;amp; cd /data/docker-compose/minio # 创建工作目录 cat &amp;gt; docker-compose.yaml &amp;lt;&amp;lt;</description>
</item>
<item>
<title>Maven ReleasePlugin 的使用记录</title>
<link>https://cdryzun.github.io/post/maven-release-plugin/</link>
<pubDate>Sun, 16 May 2021 17:52:05 +0800</pubDate>
<guid>https://cdryzun.github.io/post/maven-release-plugin/</guid>
<description>maven settings.xml 配置使用展示 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62</description>
</item>
<item>
<title>使用 Docker-Compose 部署 openConnect Vpn Server</title>
<link>https://cdryzun.github.io/post/ocserv-vpn-install/</link>
<pubDate>Sat, 15 May 2021 16:20:46 +0800</pubDate>
<guid>https://cdryzun.github.io/post/ocserv-vpn-install/</guid>
<description>环境说明 docker-compose：1.18.0 操作系统: openwrt (x86) docker version: 19.03.12 docker image yangzun/docker-openconnect-ldap:latest 此镜像基于 morganonbass/ocserv-ldap 之上做了修饰修改，原因为此容器存在 bug，无法正常启</description>
</item>
<item>
<title>K8s 部署 Lxcfs 准入控制器，实现容器中资源单独可见</title>
<link>https://cdryzun.github.io/post/k8s-lxcfs-admissionhook/</link>
<pubDate>Fri, 30 Apr 2021 14:10:31 +0800</pubDate>
<guid>https://cdryzun.github.io/post/k8s-lxcfs-admissionhook/</guid>
<description>环境说明 kubernetes version: v1.17.9 (kubeadm) os: 7.8.2003 (Core) kubernetes dashboard: rancher v2.4.15 概述 docker 使用 linux 内核中的 cgroup 实现了对 容器使用资源的限制，默认容器启动后依旧挂载了宿主机的 /proc 目录，其中包涵了，memi</description>
</item>
<item>
<title>使用 Kubekey 一键 离线/在线 部署 kubernetes 集群</title>
<link>https://cdryzun.github.io/post/kubekey-install-k8s/</link>
<pubDate>Mon, 26 Apr 2021 14:59:36 +0800</pubDate>
<guid>https://cdryzun.github.io/post/kubekey-install-k8s/</guid>
<description>环境说明 概述 KubeSphere 是在 Kubernetes 之上构建的面向云原生应用的分布式操作系统，完全开源，支持多云与多集群管理，提供全栈的 IT 自动化运维能力，简化企业的 DevOps 工作流</description>
</item>
<item>
<title>Git 使用问题的记录</title>
<link>https://cdryzun.github.io/post/git-use-issue/</link>
<pubDate>Sun, 25 Apr 2021 10:35:57 +0800</pubDate>
<guid>https://cdryzun.github.io/post/git-use-issue/</guid>
<description>指定特定仓库拉取代码 1 2 3 4 5 git remote add origin https://github.com/demo/example.git git pull https://repo.csheidou.com/forestry_afterend/prevention_fire_test.git master git branch --set-upstream-to=origin/master git status git pull 更改远程仓库地址 1 2 3 4 5 git remote -v git remote set-url origin https://github.com/demo/example.git git pull origin master --allow-unrelated-histories git push git branch --set-upstream-to=origin/master 清理本地错误的用</description>
</item>
<item>
<title>OpenVpn 的安装，并配置关联 openLdap 认证</title>
<link>https://cdryzun.github.io/post/openvpn-install/</link>
<pubDate>Thu, 22 Apr 2021 16:19:56 +0800</pubDate>
<guid>https://cdryzun.github.io/post/openvpn-install/</guid>
<description>环境说明 docker-compose：1.23.2 操作系统: armbian (斐讯n1) 部署软件 openldap 部署 省略 openldap 的部署配置 请参考之前整理的 文档 openvpn 安装 这里 openvpn 一键</description>
</item>
<item>
<title>Centos7 执行 shutdown 无法正常关机的解决</title>
<link>https://cdryzun.github.io/post/centos-shutdown-notpoweroff/</link>
<pubDate>Wed, 14 Apr 2021 10:48:42 +0800</pubDate>
<guid>https://cdryzun.github.io/post/centos-shutdown-notpoweroff/</guid>
<description>环境说明 因为在公司中，有下班后有需要关闭 服务器 的操作，并且每天还需要去手动打开。有点违背 极客精神，所有自己通过 shell script + cron 的形式进行每天定时的 开</description>
</item>
<item>
<title>Git Dailypaper shell script</title>
<link>https://cdryzun.github.io/post/git-dailypaper/</link>
<pubDate>Tue, 13 Apr 2021 13:41:01 +0800</pubDate>
<guid>https://cdryzun.github.io/post/git-dailypaper/</guid>
<description>简述 此脚本为 git 日报通知脚本，将 gitlab 中对应项目组中的所有项目 git commit 信息 已 html表格 形式发送给需要通知的人，可用与项目 敏捷开发 时进行使用。 环境说明</description>
</item>
<item>
<title>Gitlab pre-receive WebHook 的添加与使用</title>
<link>https://cdryzun.github.io/post/gitlab-pre-receive-webhook/</link>
<pubDate>Mon, 12 Apr 2021 17:25:58 +0800</pubDate>
<guid>https://cdryzun.github.io/post/gitlab-pre-receive-webhook/</guid>
<description>环境说明 版本使用说明 Gitlab version: 13.10.2 gitlab 服务器安装教程请参考 文档，本文档将示例在 gitlab 中如何添加和配置 pre-receive 钩子，并演示针对 git push 操作做相关的限制操作。 文档参考 gitlab</description>
</item>
<item>
<title>Gitlab 和 jira 之间的集成</title>
<link>https://cdryzun.github.io/post/gitlab-integration-jira/</link>
<pubDate>Fri, 09 Apr 2021 15:52:44 +0800</pubDate>
<guid>https://cdryzun.github.io/post/gitlab-integration-jira/</guid>
<description>环境说明 Gitlab-ce 版本： 13.10.2 Jira 版本：v8.13.4 Jira 获取 工作流结束 id 获取到工作流 结束 id 21 Gitlab 设置全局与 jira 集成 测试效果 找到需要关联 issue id 编辑 文件 commit</description>
</item>
<item>
<title>Docker 在 Centos7 中离线安装</title>
<link>https://cdryzun.github.io/post/docker-centosoffline-install/</link>
<pubDate>Thu, 25 Mar 2021 11:12:50 +0800</pubDate>
<guid>https://cdryzun.github.io/post/docker-centosoffline-install/</guid>
<description>环境说明 操作系统: Centos Docker 版本: 19.03.8 离线版本安装 Docker-ce 版本 YUM源 配置 - 参考文档 docker_rpm.tar.gz 离线文件准备 1 sudo yum install --downloadonly --downloaddir=./docker_rpm docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin # 下载离线包，如已机器已安装 docker 可以</description>
</item>
<item>
<title>Jira Webhook Integration Jenkins</title>
<link>https://cdryzun.github.io/post/jira-webhook-integration-jenkins/</link>
<pubDate>Tue, 16 Mar 2021 08:49:04 +0800</pubDate>
<guid>https://cdryzun.github.io/post/jira-webhook-integration-jenkins/</guid>
<description>Jira Webhook 与 Jenkins 集成 此文档为归档数据，暂不具备参考意义 Jira 创建项目 并新建模块 关联 Gitlab 中对应仓库 Jenkins 创建 jira webhook manage pipeline jira 添加 网络钩子 1 http://jenkins.xxx.net/generic-webhook-trigger/invoke?token=jira-trigger-manage&amp;amp;runOpts=JiraPush&amp;amp;issueTypeName=null&amp;amp;issueTypeStatus=null&amp;amp;projectName=${project.key}</description>
</item>
<item>
<title>Centos 单机部署 Prometheus</title>
<link>https://cdryzun.github.io/post/prometheus/</link>
<pubDate>Tue, 09 Mar 2021 15:50:54 +0800</pubDate>
<guid>https://cdryzun.github.io/post/prometheus/</guid>
<description>此文档为归档文件，不保证有效，且供参考 环境说明 操作系统: CentOS Linux release 7.9.2009 (Core) Prometheus Version: 2.25.0 Prometheus 软件包下载 1 2 3 4 5 6 7 8 wget https://github.com/prometheus/prometheus/releases/download/v2.25.0/prometheus-2.25.0.linux-amd64.tar.gz tar xf prometheus-2.25.0.linux-amd64.tar.gz mkdir -p /usr/local/prometheus cp -a prometheus-2.25.0.linux-amd64/* /usr/local/prometheus # 复制文件到，刚</description>
</item>
<item>
<title>使用 Docker 部署 Gitlab，及常用优化项的说明</title>
<link>https://cdryzun.github.io/post/gitlab-deploy/</link>
<pubDate>Thu, 04 Mar 2021 16:31:06 +0800</pubDate>
<guid>https://cdryzun.github.io/post/gitlab-deploy/</guid>
<description>环境说明及准备工作 部署 Gitlab 版本说明: 1 docker pull gitlab/gitlab-ce:13.10.2-ce.0 提前拉取好镜像。 docker-compose 版本说明: 1 2 docker-compose --version docker-compose version 1.18.0, build 8dd22a9 docker version: 19.03.9 创建 Docker-Compose 部署文件 Gitlab docker-compose.yaml 部署文件如下所示 1 2 3 4 5 6</description>
</item>
<item>
<title>Centos 7 Yum 安装 Jenkins 及常用配置的说明</title>
<link>https://cdryzun.github.io/post/jenkins-install/</link>
<pubDate>Tue, 02 Mar 2021 19:31:09 +0800</pubDate>
<guid>https://cdryzun.github.io/post/jenkins-install/</guid>
<description>环境说明 操作系统: CentOS Linux release 7.9.2009 (Core) jdk 使用说明: openjdk 1.8.0_282 jenkins 版本： 最新 长期支持版本 Jenkins 安装 这里 Jenkins 的安装方式为使用 yum 包管理进行安装，文档参考。 安装 jdk 1 2 3 4 5</description>
</item>
<item>
<title>Centos7 编译安装 Qemu 及安装 libvirt 管理工具</title>
<link>https://cdryzun.github.io/post/qume-libvirt-install/</link>
<pubDate>Thu, 25 Feb 2021 09:07:25 +0800</pubDate>
<guid>https://cdryzun.github.io/post/qume-libvirt-install/</guid>
<description>环境说明 操作系统: CentOS 7.9.2009 Qumu 版本: 5.2.0 Libvirt 版本: 5.4.0 Libvirt 高版本 没有尝试安装成功，如对高版本安装感兴趣的话可以参考这篇 文档 编译安装 Qemu ⚠️ 注意下面操作的命令</description>
</item>
<item>
<title>Raid 阵列卡 Megacli 管理工具的使用记录</title>
<link>https://cdryzun.github.io/post/raid-megacli/</link>
<pubDate>Wed, 24 Feb 2021 20:54:13 +0800</pubDate>
<guid>https://cdryzun.github.io/post/raid-megacli/</guid>
<description>安装 安装参考文档 使用参考文档 示例为： Centos7 中的安装步骤 1 2 3 4 5 6 7 wget https://docs.broadcom.com/docs-and-downloads/raid-controllers/raid-controllers-common-files/8-07-14_MegaCLI.zip unzip 8-07-14_MegaCLI.zip rpm -ivhU Linux/MegaCli-8.07.14-1.noarch.rpm cp -a /opt/MegaRAID/MegaCli/MegaCli64 /usr/local/bin/MegaCli 命令使用记录 将某块物理盘下线/上线 1 2 3 4 5 6 7 8 9 MegaCli</description>
</item>
<item>
<title>Jira &amp; confluence 安装 并 配置 破解激活</title>
<link>https://cdryzun.github.io/post/jira-install/</link>
<pubDate>Sun, 21 Feb 2021 11:02:00 +0800</pubDate>
<guid>https://cdryzun.github.io/post/jira-install/</guid>
<description>环境说明 操作系统: Centos 安装 Jira 版本: 8.13.4 使用数据库: Mysql 5.7 jdk 版本: openjdk 1.8 官方 jira 最新版本查看地址 环境初始化 安装 jdk 1 2 3 4 5 6 yum install -y java-1.8.0-openjdk [root@jira ~]# java -version openjdk version &amp;#34;1.8.0_282&amp;#34; OpenJDK Runtime Environment</description>
</item>
<item>
<title>VMware ESXi Clone 复制虚拟机</title>
<link>https://cdryzun.github.io/post/esxi-clone-hosts/</link>
<pubDate>Sun, 21 Feb 2021 10:09:38 +0800</pubDate>
<guid>https://cdryzun.github.io/post/esxi-clone-hosts/</guid>
<description>环境说明 vmware esxi 版本: 6.7 被克隆虚拟机机: centos-source 目标克隆主机: jira-confluence 虚拟机文件路径: /vmfs/volumes/1t-data/centos-7-source 具体步骤 exis 开启 ssh 远程管理 开启远程管理后，使用 工具进行终端连接 复制源磁</description>
</item>
<item>
<title>使用 斐讯n1 &amp; openWrt 搭建 k3s 集群</title>
<link>https://cdryzun.github.io/post/n1-openwrt-k3s-deploy/</link>
<pubDate>Tue, 26 Jan 2021 09:26:39 +0800</pubDate>
<guid>https://cdryzun.github.io/post/n1-openwrt-k3s-deploy/</guid>
<description>环境说明 软件说明 K3s version : v1.19.7+k3s1 Docker version: 19.03.13 (n1)，19.03.12 (openwrt) 写盘工具: balenaEtcher 机器说明 IP 地址 机型 配置 操作系统 角色 192.168.8.1 占美 (机型不详) 4c 2g ( cpu N2940 ) ope</description>
</item>
<item>
<title>在 Kubernetes 中部署 nfs storageClass</title>
<link>https://cdryzun.github.io/post/k8s-nfs-strage-class/</link>
<pubDate>Tue, 19 Jan 2021 14:54:30 +0800</pubDate>
<guid>https://cdryzun.github.io/post/k8s-nfs-strage-class/</guid>
<description>环境说明： helm version: v3.4.2 kubernetes version: v1.19.6 nfs server: 192.168.8.66 sub-net: 192.168.8.0/24 nfs 服务端配置 1 yum install rpcbind nfs-utils -y # 安装 nfs server 创建用户 &amp;amp; 数据目录 1 2 3 4 5 6 7 8 9 groupadd -g 2233 nfs-user useradd nfs-user -M -s /sbin/nologin -u 2233 -g nfs-user id nfs-user mkdir -p /data/nfs.sharedir chown</description>
</item>
<item>
<title>使用 Confluentinc 在 Kubernetes 集群中部署 Kafka 集群 </title>
<link>https://cdryzun.github.io/post/k8s-deploy-kafka-cluster/</link>
<pubDate>Tue, 19 Jan 2021 13:44:03 +0800</pubDate>
<guid>https://cdryzun.github.io/post/k8s-deploy-kafka-cluster/</guid>
<description>部署说明 kafka &amp;amp; zookeeper 集群部署工具: confluentinc 使用 helm 进行部署，并部署一个外置的 kafka 管理工具。 环境说明 kubernetes version: v1.17.4 helm version: v3.3.1 traefik version: v2.3.6 docker version: 18.09.6 k8s strage class: nfs kafka dashboard: kafka-manager 集群部署 Helm 应用下载 1</description>
</item>
<item>
<title>初探 Traefik ingress gateway</title>
<link>https://cdryzun.github.io/post/ingress-traefik/</link>
<pubDate>Sun, 17 Jan 2021 16:15:32 +0800</pubDate>
<guid>https://cdryzun.github.io/post/ingress-traefik/</guid>
<description>Traefik 基础概念说明 Traefik 是一个 开源 的边缘路由器，使发布服务变得有趣而轻松，是你整个平台的大门，拦截并匹配每一个传入的请求：它掌管着所有的匹配逻辑和路</description>
</item>
<item>
<title>Rancher 单机部署，进行升级后，导致docker无法正常启动</title>
<link>https://cdryzun.github.io/post/rancher-upgrade-docker/</link>
<pubDate>Sat, 16 Jan 2021 14:39:59 +0800</pubDate>
<guid>https://cdryzun.github.io/post/rancher-upgrade-docker/</guid>
<description>环境说明 操作系统: Centos 7.9.2009 Docker Version: 18.09.9 模拟复现 rancher 安装 1 2 3 4 5 6 7 8 docker pull rancher/rancher:v2.3.5 docker run -d \ --restart=unless-stopped \ --name rancher \ -p 80:80 -p 443:443 \ --privileged \ rancher/rancher:v2.3.5 升级 rancher 示例将 v2.3.5 升级至 v2.5.0 创建备份 1 2 3 4 5 docker</description>
</item>
<item>
<title>记录一次，因误删容器导致的容器恢复过程</title>
<link>https://cdryzun.github.io/post/delete-container-reset/</link>
<pubDate>Thu, 14 Jan 2021 20:09:58 +0800</pubDate>
<guid>https://cdryzun.github.io/post/delete-container-reset/</guid>
<description>环境说明 因在日常维护过程中升级了docker的版本 ，碰到了一个 docker 的一个 bug, 导致 docker 服务无法正常启动。在恢复 docker 服务的过程中把 /var/lib/docker/containers 下的所有文件给 清空 了</description>
</item>
<item>
<title>Coredns 出现间断性无法正常解析域名问题</title>
<link>https://cdryzun.github.io/post/intermittent-coredns-hosts/</link>
<pubDate>Thu, 07 Jan 2021 14:34:16 +0800</pubDate>
<guid>https://cdryzun.github.io/post/intermittent-coredns-hosts/</guid>
<description>问题描述: Kubernetes 节点中，有一台节点使用 coredns 进行解析某个域名时，出现间断性无法正常解析问题，而解析另外一个域名时不会出现解析问题。 再次重复一下问题重</description>
</item>
<item>
<title>使用 Docker 部署 Nexus3 私服的详细记录总结</title>
<link>https://cdryzun.github.io/post/docker-deploy-nexus3-upgrade/</link>
<pubDate>Tue, 22 Dec 2020 09:24:55 +0800</pubDate>
<guid>https://cdryzun.github.io/post/docker-deploy-nexus3-upgrade/</guid>
<description>Nexus3.x 说明 功能介绍 Nexus3, 是一款支持仓库种类繁多的私服仓库管理工具，支持目前大众所知晓的仓库类型如：go、pypi、docker、maven、yum、</description>
</item>
<item>
<title>部署 Nginx-Ingress 并配置暴露 kubernetes dashboard</title>
<link>https://cdryzun.github.io/post/ingress-to-dashboard/</link>
<pubDate>Tue, 22 Dec 2020 09:24:55 +0800</pubDate>
<guid>https://cdryzun.github.io/post/ingress-to-dashboard/</guid>
<description>环境说明 链接文档 软件版本说明 helm: v3.4.2 ingress: v3.16.1 Nginx Ingress 参考文档 安装 1 2 3 4 wget https://get.helm.sh/helm-v3.4.2-linux-amd64.tar.gz tar xf helm-v3.4.2-linux-amd64.tar.gz \ &amp;amp;&amp;amp; cp linux-amd64/helm /usr/local/bin/ 添加helm命令补全 1 2 helm completion bash \ &amp;amp;&amp;amp; helm completion bash &amp;gt; /etc/bash_completion.d/helm 添加 ingress repo 1 2 3 helm</description>
</item>
<item>
<title>Kubeadm 部署 kubernetes-v1.19.x 集群</title>
<link>https://cdryzun.github.io/post/kubeadm-deploy-k8s1.9/</link>
<pubDate>Mon, 21 Dec 2020 13:19:31 +0800</pubDate>
<guid>https://cdryzun.github.io/post/kubeadm-deploy-k8s1.9/</guid>
<description>系统环境说明 使用操作系统: Centos-7.9.2009 操作系统内核版本: 4.4.248 (lt) Docker容器版本: 18.09.9 Kubeadm 版本: 1.19.6 节点说明: master01: 192.168.8.70 ,192.168.88.70 node01: 192.168.8.71 ,192.168.88.71 (备注: 为每个节点配置了两个ip，</description>
</item>
<item>
<title>Centos7 安装之后必要的初始化操作</title>
<link>https://cdryzun.github.io/post/centos-init-config/</link>
<pubDate>Mon, 21 Dec 2020 09:34:01 +0800</pubDate>
<guid>https://cdryzun.github.io/post/centos-init-config/</guid>
<description>⚠️ 注意此些操作在Centos7中得到验证且可行，其他发行版本请自己尝试 OS 调优 内核优化 ⚠️ 请更具实践业务场景进行调整，此示例中较适合kube</description>
</item>
<item>
<title>kubernetes 集群中 控制平面 组件频繁发生重启的问题排查记录</title>
<link>https://cdryzun.github.io/post/flannel-exclusion-records/</link>
<pubDate>Fri, 18 Dec 2020 16:24:43 +0800</pubDate>
<guid>https://cdryzun.github.io/post/flannel-exclusion-records/</guid>
<description>环境说明 Kubernetes 版本: v1.19.6 使用操作系统: Centos-7.9.2009 现象说明 最近在使用k8s集群的时候，发现集群变慢了许多，排查发现 master 节点中 controller-manager 及 scheduler 组件频繁的发生重启 排查记录 抓</description>
</item>
<item>
<title>部署 Devops 必备利器 OpenLdap</title>
<link>https://cdryzun.github.io/post/docker-deploy-ldap/</link>
<pubDate>Fri, 18 Dec 2020 16:24:43 +0800</pubDate>
<guid>https://cdryzun.github.io/post/docker-deploy-ldap/</guid>
<description>环境说明: 操作系统: Centos Docker 版本: 19.03.8 使用容器: osixia/phpldapadmin:latest 、osixia/openldap:latest 、grams/ltb-self-service-p</description>
</item>
<item>
<title>Docker Quickstart Redis Server</title>
<link>https://cdryzun.github.io/post/docker-quickstart-redis/</link>
<pubDate>Mon, 30 Nov 2020 10:35:47 +0800</pubDate>
<guid>https://cdryzun.github.io/post/docker-quickstart-redis/</guid>
<description>环境说明: 系统镜像: Redis:5.x （示例容器为: redis:5.0.4 ） 操作系统: Centos Docker 版本: 19.03.8 具体实现步骤 操作系统简单优化 1 2 3 4 5 6 echo &amp;#39;vm.overcommit_memory=1 net.core.somaxconn=65535&amp;#39; &amp;gt;&amp;gt; /etc/sysctl.conf sysctl -p echo never &amp;gt; /sys/kernel/mm/transparent_hugepage/enable 下载容器 1 docker pull redis:5.0.4</description>
</item>
<item>
<title>Docker 部署多网口 openWrt 软路由</title>
<link>https://cdryzun.github.io/post/openwrt-docker-multi-net/</link>
<pubDate>Thu, 19 Nov 2020 17:56:52 +0800</pubDate>
<guid>https://cdryzun.github.io/post/openwrt-docker-multi-net/</guid>
<description>环境说明: 操作系统: Centos 7.8.2003 内核版本: 4.14.129-bbrplus Docker 版本: 19.03.12 使用 Docker 镜像: raymondwong/openwrt_r9:20.1.24-x86_64 网卡说明: 板载螃蟹网卡、绿联 usb3.0 千M 网卡 系统网卡配置 将对应网卡启动混淆模式 1 2 3 4</description>
</item>
<item>
<title>Docker 部署的 openWrt 软路由, 并解决无法与宿主机通信问题</title>
<link>https://cdryzun.github.io/post/n1-docker/</link>
<pubDate>Sun, 15 Nov 2020 16:09:10 +0800</pubDate>
<guid>https://cdryzun.github.io/post/n1-docker/</guid>
<description>环境说明 宿主机 IP：192.168.8.102 Docker 内 openWrt macvlan ip: 192.168.8.111 主路由网关：192.168.8.1 机器网段为: 192.168.8.0/24 docker 使用容器: raymondwong/openwrt_r9:21.2.1-arm64 操作系统: ARMBIAN docker 部署 openWrt</description>
</item>
<item>
<title>Kind 部署本地k8s集群的使用记录</title>
<link>https://cdryzun.github.io/post/first-kind/</link>
<pubDate>Sun, 15 Nov 2020 14:24:42 +0800</pubDate>
<guid>https://cdryzun.github.io/post/first-kind/</guid>
<description>参考资料 Github 地址 参考博客 安装 1 2 3 curl -Lo ./kind &amp;#34;https://kind.sigs.k8s.io/dl/v0.9.0/kind-$(uname)-amd64&amp;#34; chmod +x ./kind mv ./kind /some-dir-in-your-PATH/kind 启动集群 注意启动集群前 请确认 docker 服务是否启动 1 2 3 4 5 6 7 8 9 10 11 12 docker info|grep -A 2 Server # 确认 是否启</description>
</item>
</channel>
</rss>