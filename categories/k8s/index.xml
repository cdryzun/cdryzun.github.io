<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>k8s on 「Leafy&#39;John」PlayGround</title>
    <link>https://cdryzun.github.io/categories/k8s/</link>
    <description>Recent content in k8s on 「Leafy&#39;John」PlayGround</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Oct 2021 13:44:45 +0800</lastBuildDate><atom:link href="https://cdryzun.github.io/categories/k8s/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rke 集群集成 Kube-Vip 实现 Loadbalance Service 资源的使用</title>
      <link>https://cdryzun.github.io/post/rke-kubevip-loadbalance/</link>
      <pubDate>Tue, 12 Oct 2021 13:44:45 +0800</pubDate>
      
      <guid>https://cdryzun.github.io/post/rke-kubevip-loadbalance/</guid>
      <description>背景 Kube-Vip 最初是为 Kubernetes 控制平面提供 HA 解决方案而创建的，随着时间的推移，它已经发展为将相同的功能合并到 Kubernetes 的 LoadBalancer 类型的 Service 中。Kube-Vip 特点 如下： VIP</description>
    </item>
    
    <item>
      <title>记录一次 JupyterLab 插件打包问题的修复</title>
      <link>https://cdryzun.github.io/post/pipeline-jupyter-labextension-build-fix/</link>
      <pubDate>Tue, 20 Jul 2021 17:04:26 +0800</pubDate>
      
      <guid>https://cdryzun.github.io/post/pipeline-jupyter-labextension-build-fix/</guid>
      <description>背景 在所关联项目 的 jenkins pipeline ci 流水线中，开发告诉我 生成的 pip 包中未有生成相关的 labextension 依赖文件夹，导致 pip 包虽然是安装成功了，但仍是一个不可用的状态。开发人</description>
    </item>
    
    <item>
      <title>使用 Cronjob 定时清理 ElasticSearch 中的日志索引</title>
      <link>https://cdryzun.github.io/post/cronjob-clean-es-index/</link>
      <pubDate>Tue, 13 Jul 2021 11:45:00 +0800</pubDate>
      
      <guid>https://cdryzun.github.io/post/cronjob-clean-es-index/</guid>
      <description>背景 在日常使用 efk 日志系统的过程中，每天造成的日志索引量是巨大的，需要进行对相关的索引进行定期清理，来缓解后端储存的占用。如何实现在 kubernetes 中进行优</description>
    </item>
    
    <item>
      <title>初探 K8s VPA 垂直更改 Pod 资源请求</title>
      <link>https://cdryzun.github.io/post/k8s-vpa/</link>
      <pubDate>Thu, 08 Jul 2021 14:41:34 +0800</pubDate>
      
      <guid>https://cdryzun.github.io/post/k8s-vpa/</guid>
      <description>背景 Vertical Pod Autoscaler（VPA）使用户无需设置 pod 最新的资源限制。 配置后它将根据资源实际使用情况自动设置 request ，从而允许在节点上进行适当的调</description>
    </item>
    
    <item>
      <title>使用 Kube-Vip 部署 高可用的 Kubernetes 集群</title>
      <link>https://cdryzun.github.io/post/kube-vip-deploy-ha-k8s-cluster/</link>
      <pubDate>Thu, 24 Jun 2021 11:01:10 +0800</pubDate>
      
      <guid>https://cdryzun.github.io/post/kube-vip-deploy-ha-k8s-cluster/</guid>
      <description>前言 在以前我们在私有环境下创建 Kubernetes 集群时，我们需要准备一个硬件/软件的 负载均衡器 来创建多控制平面集群，更多的情况下我们会选择使用 HAProxy + Keepalived 来实现这</description>
    </item>
    
    <item>
      <title>Kaniko Docker 镜像构建 初体验</title>
      <link>https://cdryzun.github.io/post/kaniko-image-build/</link>
      <pubDate>Tue, 15 Jun 2021 10:02:48 +0800</pubDate>
      
      <guid>https://cdryzun.github.io/post/kaniko-image-build/</guid>
      <description>使用 docker 命令直接进行构建 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 echo -n yangzun:123456 | base64 eWFuZ3p1bjoxMjM0NTY= cat &amp;gt;&amp;gt; config.json &amp;lt;&amp;lt; EOF { &amp;#34;auths&amp;#34;: { &amp;#34;https://idocker.io/v2/&amp;#34;: { &amp;#34;auth&amp;#34;: &amp;#34;eWFuZ3p1bjoxMjM0NTY=&amp;#34; } } } EOF [root@node1 kaniko]# ls -lh 总用量 4.0K -rw-r--r-- 1 root root</description>
    </item>
    
    <item>
      <title>Rancher 导入集群提示 Scheduler &amp; Controller 不健康问题修复</title>
      <link>https://cdryzun.github.io/post/rancher-import-cluster-fix/</link>
      <pubDate>Tue, 08 Jun 2021 08:45:22 +0800</pubDate>
      
      <guid>https://cdryzun.github.io/post/rancher-import-cluster-fix/</guid>
      <description>环境说明 Kubernetes Version: v1.20.4 (kubekey 部署) 操作系统: CentOS 7.9.2009 Rancher Version: v2.4.15 准备 k8s 模拟环境 此次将使用 kubekey 进行一键部署，kubekey 底层 集群部署 基于 kubeadm， 感兴趣的话，</description>
    </item>
    
    <item>
      <title>在 Kubernetes 中使用 localPv 部署 Gitlab</title>
      <link>https://cdryzun.github.io/post/kubernetes-deploy-gitlab/</link>
      <pubDate>Tue, 01 Jun 2021 10:13:29 +0800</pubDate>
      
      <guid>https://cdryzun.github.io/post/kubernetes-deploy-gitlab/</guid>
      <description>环境说明 Kubernetes Version: v1.20.4 Postgres Version: 12.7 Redis Version: 5.0.9 因在官方提供的 gitlab-ce 镜像中，内置了 Postgres &amp;amp; Redis 的安装，在实际生产使用过程中，想让其连接使用外部统一的服务进行使用，来合理统一</description>
    </item>
    
    <item>
      <title>使用 Helm 配合 localPV 在 K8s 中部署 Mariadb 主程复制集群</title>
      <link>https://cdryzun.github.io/post/helm-k8s-deploy-mariadb/</link>
      <pubDate>Tue, 25 May 2021 11:33:17 +0800</pubDate>
      
      <guid>https://cdryzun.github.io/post/helm-k8s-deploy-mariadb/</guid>
      <description>环境说明 helm version: v3.3.1 kubernetes: v1.17.9 使用 helm chart: bitnami/mariadb 操作系统: CentOS 7.8.2003 helm 部署 mariadb 前的准备 添加 helm 私服 1 2 3 4 5 6 helm repo add bitnami https://charts.bitnami.com/bitnami helm repo update # 更新仓库索引 helm search repo mariadb bitnami/mariadb 9.3.12 10.5.10 Fast, reliable, scalable, and easy to use open-...</description>
    </item>
    
    <item>
      <title>使用 Helm 部署 Spinnaker 持续部署(CD)平台</title>
      <link>https://cdryzun.github.io/post/spinnaker-helm-installd/</link>
      <pubDate>Mon, 24 May 2021 16:33:49 +0800</pubDate>
      
      <guid>https://cdryzun.github.io/post/spinnaker-helm-installd/</guid>
      <description>环境说明 Kubernetes Version: v1.17.9 操作系统: CentOS 7.8.2003 Helm Version: v3.2.1 Spinnaker Version: 1.26.3 spinnaker 版本说明 spinnaker 组件说明 Deck：前端web页面 端口9000 Gate：API网关，所有程序通过gate与</description>
    </item>
    
    <item>
      <title>使用 helm 在 Kubernetes 中部署 Nexus 私服</title>
      <link>https://cdryzun.github.io/post/helm-k8s-deploy-nexus/</link>
      <pubDate>Sun, 23 May 2021 15:50:31 +0800</pubDate>
      
      <guid>https://cdryzun.github.io/post/helm-k8s-deploy-nexus/</guid>
      <description>环境说明 helm version: v3.3.1 kubernetes: v1.17.9 nexus: 3.29.0 部署 准备 storageClass 非 必要 操作，可以选择手动创建 pvc &amp;amp; pv，如果想部署 nfsStorageClass 的话，请参考早期整理的 文档。此篇文档实战部署步骤中基于 nfsStorageClass 进</description>
    </item>
    
    <item>
      <title>Rancher 开启监控后的，阈值告警配置说明 (三)</title>
      <link>https://cdryzun.github.io/post/rancher-monitor-config-third/</link>
      <pubDate>Wed, 19 May 2021 08:41:26 +0800</pubDate>
      
      <guid>https://cdryzun.github.io/post/rancher-monitor-config-third/</guid>
      <description>环境说明 此文档为 rancher monitor 使用系列的 第三篇 ，主要介绍与 dingtalk 关联配置告警通知、prometheus 告警阈值的配置使用 配置安装 dingtalk webhook webhook github 地址 安装 kustomize 1 2 3 4</description>
    </item>
    
    <item>
      <title>Rancher 开启监控后，exporter/metrics 的添加说明 (二)</title>
      <link>https://cdryzun.github.io/post/rancher-monitor-config-second/</link>
      <pubDate>Mon, 17 May 2021 10:41:26 +0800</pubDate>
      
      <guid>https://cdryzun.github.io/post/rancher-monitor-config-second/</guid>
      <description>环境说明 上期 介绍了 rancher prometheus operator 的安装和基础 targets 的修复工作。有的时候我们抓取的 exporter metrics 并不在同集群且与集群没有任何关联时，应该怎么和 rancher monitor 进行关联配置呢？下</description>
    </item>
    
    <item>
      <title>Rancher 开启监控，及生产应用的优化配置工作说明 (一)</title>
      <link>https://cdryzun.github.io/post/rancher-monitor-config-first/</link>
      <pubDate>Mon, 17 May 2021 10:41:26 +0800</pubDate>
      
      <guid>https://cdryzun.github.io/post/rancher-monitor-config-first/</guid>
      <description>环境说明 kubernetes version: v1.17.9 rancher dashboard: v2.3.5 操作系统: centos 7.8.2003 基础环境配置 使用 kubekey 部署 kubernetes 集群 由于篇幅原因，此处省略部署说明，请参考较早期的 文档说明 rancher 单机部署 安装 docker-compose 1 yum install -y</description>
    </item>
    
    <item>
      <title>Velero 备份迁移工具的安装</title>
      <link>https://cdryzun.github.io/post/velero-install/</link>
      <pubDate>Sun, 16 May 2021 18:00:36 +0800</pubDate>
      
      <guid>https://cdryzun.github.io/post/velero-install/</guid>
      <description>组件安装 基础依赖安装 安装 docker-compose 1 yum install -y docker-compose minio 对象存储的安装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 mkdir -p /data/docker-compose/minio &amp;amp;&amp;amp; cd /data/docker-compose/minio # 创建工作目录 cat &amp;gt; docker-compose.yaml &amp;lt;&amp;lt;</description>
    </item>
    
    <item>
      <title>K8s 部署 Lxcfs 准入控制器，实现容器中资源单独可见</title>
      <link>https://cdryzun.github.io/post/k8s-lxcfs-admissionhook/</link>
      <pubDate>Fri, 30 Apr 2021 14:10:31 +0800</pubDate>
      
      <guid>https://cdryzun.github.io/post/k8s-lxcfs-admissionhook/</guid>
      <description>环境说明 kubernetes version: v1.17.9 (kubeadm) os: 7.8.2003 (Core) kubernetes dashboard: rancher v2.4.15 概述 docker 使用 linux 内核中的 cgroup 实现了对 容器使用资源的限制，默认容器启动后依旧挂载了宿主机的 /proc 目录，其中包涵了，memi</description>
    </item>
    
    <item>
      <title>使用 Kubekey 一键 离线/在线 部署 kubernetes 集群</title>
      <link>https://cdryzun.github.io/post/kubekey-install-k8s/</link>
      <pubDate>Mon, 26 Apr 2021 14:59:36 +0800</pubDate>
      
      <guid>https://cdryzun.github.io/post/kubekey-install-k8s/</guid>
      <description>环境说明 概述 KubeSphere 是在 Kubernetes 之上构建的面向云原生应用的分布式操作系统，完全开源，支持多云与多集群管理，提供全栈的 IT 自动化运维能力，简化企业的 DevOps 工作流</description>
    </item>
    
    <item>
      <title>在 Kubernetes 中部署 nfs storageClass</title>
      <link>https://cdryzun.github.io/post/k8s-nfs-strage-class/</link>
      <pubDate>Tue, 19 Jan 2021 14:54:30 +0800</pubDate>
      
      <guid>https://cdryzun.github.io/post/k8s-nfs-strage-class/</guid>
      <description>环境说明： helm version: v3.4.2 kubernetes version: v1.19.6 nfs server: 192.168.8.66 sub-net: 192.168.8.0/24 nfs 服务端配置 1 yum install rpcbind nfs-utils -y # 安装 nfs server 创建用户 &amp;amp; 数据目录 1 2 3 4 5 6 7 8 9 groupadd -g 2233 nfs-user useradd nfs-user -M -s /sbin/nologin -u 2233 -g nfs-user id nfs-user mkdir -p /data/nfs.sharedir chown</description>
    </item>
    
    <item>
      <title>使用 Confluentinc 在 Kubernetes 集群中部署 Kafka 集群 </title>
      <link>https://cdryzun.github.io/post/k8s-deploy-kafka-cluster/</link>
      <pubDate>Tue, 19 Jan 2021 13:44:03 +0800</pubDate>
      
      <guid>https://cdryzun.github.io/post/k8s-deploy-kafka-cluster/</guid>
      <description>部署说明 kafka &amp;amp; zookeeper 集群部署工具: confluentinc 使用 helm 进行部署，并部署一个外置的 kafka 管理工具。 环境说明 kubernetes version: v1.17.4 helm version: v3.3.1 traefik version: v2.3.6 docker version: 18.09.6 k8s strage class: nfs kafka dashboard: kafka-manager 集群部署 Helm 应用下载 1</description>
    </item>
    
    <item>
      <title>初探 Traefik ingress gateway</title>
      <link>https://cdryzun.github.io/post/ingress-traefik/</link>
      <pubDate>Sun, 17 Jan 2021 16:15:32 +0800</pubDate>
      
      <guid>https://cdryzun.github.io/post/ingress-traefik/</guid>
      <description>Traefik 基础概念说明 Traefik 是一个 开源 的边缘路由器，使发布服务变得有趣而轻松，是你整个平台的大门，拦截并匹配每一个传入的请求：它掌管着所有的匹配逻辑和路</description>
    </item>
    
    <item>
      <title>Rancher 单机部署，进行升级后，导致docker无法正常启动</title>
      <link>https://cdryzun.github.io/post/rancher-upgrade-docker/</link>
      <pubDate>Sat, 16 Jan 2021 14:39:59 +0800</pubDate>
      
      <guid>https://cdryzun.github.io/post/rancher-upgrade-docker/</guid>
      <description>环境说明 操作系统: Centos 7.9.2009 Docker Version: 18.09.9 模拟复现 rancher 安装 1 2 3 4 5 6 7 8 docker pull rancher/rancher:v2.3.5 docker run -d \ --restart=unless-stopped \ --name rancher \ -p 80:80 -p 443:443 \ --privileged \ rancher/rancher:v2.3.5 升级 rancher 示例将 v2.3.5 升级至 v2.5.0 创建备份 1 2 3 4 5 docker</description>
    </item>
    
    <item>
      <title>Coredns 出现间断性无法正常解析域名问题</title>
      <link>https://cdryzun.github.io/post/intermittent-coredns-hosts/</link>
      <pubDate>Thu, 07 Jan 2021 14:34:16 +0800</pubDate>
      
      <guid>https://cdryzun.github.io/post/intermittent-coredns-hosts/</guid>
      <description>问题描述: Kubernetes 节点中，有一台节点使用 coredns 进行解析某个域名时，出现间断性无法正常解析问题，而解析另外一个域名时不会出现解析问题。 再次重复一下问题重</description>
    </item>
    
    <item>
      <title>部署 Nginx-Ingress 并配置暴露 kubernetes dashboard</title>
      <link>https://cdryzun.github.io/post/ingress-to-dashboard/</link>
      <pubDate>Tue, 22 Dec 2020 09:24:55 +0800</pubDate>
      
      <guid>https://cdryzun.github.io/post/ingress-to-dashboard/</guid>
      <description>环境说明 链接文档 软件版本说明 helm: v3.4.2 ingress: v3.16.1 Nginx Ingress 参考文档 安装 1 2 3 4 wget https://get.helm.sh/helm-v3.4.2-linux-amd64.tar.gz tar xf helm-v3.4.2-linux-amd64.tar.gz \ &amp;amp;&amp;amp; cp linux-amd64/helm /usr/local/bin/ 添加helm命令补全 1 2 helm completion bash \ &amp;amp;&amp;amp; helm completion bash &amp;gt; /etc/bash_completion.d/helm 添加 ingress repo 1 2 3 helm</description>
    </item>
    
    <item>
      <title>Kubeadm 部署 kubernetes-v1.19.x 集群</title>
      <link>https://cdryzun.github.io/post/kubeadm-deploy-k8s1.9/</link>
      <pubDate>Mon, 21 Dec 2020 13:19:31 +0800</pubDate>
      
      <guid>https://cdryzun.github.io/post/kubeadm-deploy-k8s1.9/</guid>
      <description>系统环境说明 使用操作系统: Centos-7.9.2009 操作系统内核版本: 4.4.248 (lt) Docker容器版本: 18.09.9 Kubeadm 版本: 1.19.6 节点说明: master01: 192.168.8.70 ,192.168.88.70 node01: 192.168.8.71 ,192.168.88.71 (备注: 为每个节点配置了两个ip，</description>
    </item>
    
    <item>
      <title>kubernetes 集群中 控制平面 组件频繁发生重启的问题排查记录</title>
      <link>https://cdryzun.github.io/post/flannel-exclusion-records/</link>
      <pubDate>Fri, 18 Dec 2020 16:24:43 +0800</pubDate>
      
      <guid>https://cdryzun.github.io/post/flannel-exclusion-records/</guid>
      <description>环境说明 Kubernetes 版本: v1.19.6 使用操作系统: Centos-7.9.2009 现象说明 最近在使用k8s集群的时候，发现集群变慢了许多，排查发现 master 节点中 controller-manager 及 scheduler 组件频繁的发生重启 排查记录 抓</description>
    </item>
    
    <item>
      <title>Kind 部署本地k8s集群的使用记录</title>
      <link>https://cdryzun.github.io/post/first-kind/</link>
      <pubDate>Sun, 15 Nov 2020 14:24:42 +0800</pubDate>
      
      <guid>https://cdryzun.github.io/post/first-kind/</guid>
      <description>参考资料 Github 地址 参考博客 安装 1 2 3 curl -Lo ./kind &amp;#34;https://kind.sigs.k8s.io/dl/v0.9.0/kind-$(uname)-amd64&amp;#34; chmod +x ./kind mv ./kind /some-dir-in-your-PATH/kind 启动集群 注意启动集群前 请确认 docker 服务是否启动 1 2 3 4 5 6 7 8 9 10 11 12 docker info|grep -A 2 Server # 确认 是否启</description>
    </item>
    
  </channel>
</rss>
